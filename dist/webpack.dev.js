"use strict";function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}var _express=_interopRequireDefault(require("express"));var _webpack=_interopRequireDefault(require("webpack"));var _path=_interopRequireDefault(require("path"));var _cors=_interopRequireDefault(require("cors"));var _fs=_interopRequireDefault(require("fs"));var _chokidar=_interopRequireDefault(require("chokidar"));var _progressBarWebpackPlugin=_interopRequireDefault(require("progress-bar-webpack-plugin"));var _logger=_interopRequireDefault(require("./config/logger"));var _middleware=_interopRequireDefault(require("./config/middleware"));var _options=_interopRequireDefault(require("./config/options"));var entry=_interopRequireWildcard(require("./config/entry"));var _utils=require("./utils");var _webpack2=_interopRequireDefault(require("./webpack.base"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||_typeof(obj)!=="object"&&typeof obj!=="function"){return{"default":obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj["default"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}// import WebpackNotifierPlugin from 'webpack-notifier';
if(!(0,_utils.fsExistsSync)('.webpack-watch.log')){_logger["default"].error('请在项目根目录下添加.webpack-watch.log文件, 否则无法监听新增入口JS文件');}var app=(0,_express["default"])();var compiler=(0,_webpack["default"])(_webpack2["default"]);// new WebpackNotifierPlugin().apply(compiler);
new _progressBarWebpackPlugin["default"]().apply(compiler);app.use((0,_middleware["default"])(compiler,_options["default"].output.publicPath));// app.use(cors());
app.listen(_options["default"].__DEV_SERVER_PORT__,'0.0.0.0',function(err){_logger["default"].info("Express server listening on ".concat(_options["default"].__DEV_SERVER_PORT__," in ").concat(app.settings.env," node"));if(err){_logger["default"].error(err);}});var watchDir=["".concat(_options["default"].globalDir,"/app"),_options["default"].pluginsDir,_options["default"].themesDir,_options["default"].bundlesDir,_options["default"].activitiesDir];var watcher=_chokidar["default"].watch(watchDir,{ignored:/[\/\\]\./,ignoreInitial:true});var isEntryFile=function isEntryFile(path){return path.indexOf("".concat(_options["default"].entryFileName,".js"))!==-1&&path.indexOf('static-src')!==-1;};// 监听新增入口文件
watcher.on('add',function(path){if(isEntryFile(path)){if((0,_utils.fsExistsSync)('.webpack-watch.log')){_logger["default"].info("\u5165\u53E3JS\u6587\u4EF6".concat(path,"\u88AB\u65B0\u589E"));_fs["default"].writeFileSync('.webpack-watch.log',"File ".concat(path," has been added"),'utf8');}else{_logger["default"].error("请在项目根目录下添加.webpack-watch.log文件, 否则无法监听新增入口JS文件");}}});